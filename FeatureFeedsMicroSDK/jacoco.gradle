import groovy.xml.MarkupBuilder

apply plugin: 'jacoco'

jacoco {
    toolVersion '0.8.8'
}

//define which classes to exclude
def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*$Lambda$*.*',
        '**/*Module.*',
        '**/*Dagger*.*',
        '**/*MembersInjector*.*',
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*',
        '**/*$*$*.*',
        'callback/*.*',
        'database/*.*',
        'library/*.*',
]

def fileFilterInclude = [
        'manager/LocalApiManager.kt',
        'data/FeatureFeedRepositoryImpl.kt',
        'FeatureFeedsMicroSDK.kt',
]

def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes/com/raweng/dfe/microsdk/featurefeeds/", excludes: fileFilter, includes: fileFilterInclude)
def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug/com/raweng/dfe/microsdk/featurefeeds/", excludes: fileFilter, includes: fileFilterInclude)
def mainSrc = files(["src/main/java/"])

task localJacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugAndroidTestCoverageReport']) {
    description = 'Generate Jacoco coverage reports'
    group = 'Reporting'

    def execFileTree = fileTree(dir: "$buildDir"
            , includes: ["jacoco/testDebugUnitTest.exec"
                         , "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"])

    getSourceDirectories().setFrom(mainSrc)
    getClassDirectories().setFrom([debugTree, kotlinDebugTree])
    getExecutionData().setFrom(execFileTree)

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task jacocoTestReport(type: JacocoReport) {
    description = 'Generate Jacoco Coverage Report'
    group = 'Reporting'

    def execFileTree = fileTree(dir: "$buildDir", include: ["outputs/*coverage.ec"])
    getSourceDirectories().setFrom(mainSrc)
    getClassDirectories().setFrom(debugTree)
    getExecutionData().setFrom(execFileTree)
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task getCoverage(type: Exec, dependsOn: 'localJacocoTestReport') {
    group = "Reporting"
    commandLine "open", "$buildDir/reports/jacoco/localJacocoTestReport/html/index.html"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

def buildDirExist() {
    File buildDir = file("$buildDir/test-report")
    if (!buildDir.exists()) {
        buildDir.mkdirs()
    }

    copy {
        from "${rootProject.projectDir}/css"
        into "$buildDir/css"
    }
}

task htmlReport {
    doFirst {
        buildDirExist()
    }
    doLast {
        def xmlFile = new XmlParser().parse(new File("$buildDir/outputs/test_result.xml"))
        def xmlWriter = new FileWriter(new File("$buildDir/test-report/index.html"))
        def xmlMarkup = new MarkupBuilder(xmlWriter)
        xmlWriter.write("<!DOCTYPE html>\n")
        xmlMarkup.html() {
            head() {
                meta(charset: "utf-8")
                meta(name: "viewport", content: "width=device-width, initial-scale=1, maximum-scale=1")
                title("Test Report")
                link(rel: "stylesheet", href: "./css/main.css") { mkp.yield("") }
                link(rel: "stylesheet", href: "https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/css/materialize.min.css", media: "screen,projection") {
                    mkp.yield("")
                }
                link(rel: "stylesheet", href: "https://fonts.googleapis.com/icon?family=Material+Icons") {
                    mkp.yield("")
                }
            }
            body() {
                header() {
                    div("class": "nav-wrapper") {
                        nav(class: "blue darken-3") {
                            a(class: "brand-logo", href: "#", id: "logo-container") {
                                img(class: "logo-img", src: "") {
                                    mkp.yield("")
                                }
                            }
                            a("href": "index.html") {
                                ul(class: "center flow-text", "TEST RESULTS")
                            }
                        }
                    }
                }
                main() {
                    div(class: "container") {
                        div(style: "margin-bottom: 50px;") {
                            table(class: "striped responsive-table", id: "example") {
                                thead() {
                                    tr() {
                                        th(class: "center", "Test Suite")
                                        th(class: "center", "Passed")
                                        th(class: "center", "Failed")
                                        th(class: "center", "Total")
                                    }
                                }
                                tbody() {
                                    tr() {
                                        td(class: "center",) {
                                            def fileName = xmlFile.'@name'
                                            if (fileName.isEmpty()) {
                                                fileName = "Hawks Test Report"
                                            }
                                            a(href: "report.html", fileName)
                                        }
                                        td(class: "center", Integer.valueOf(Integer.valueOf(xmlFile.'@tests') - Integer.valueOf(xmlFile.'@failures')))
                                        td(class: "center", xmlFile.'@failures')
                                        td(class: "center", xmlFile.'@tests')
                                    }

                                }
                            }
                        }
                    }
                }
            }
            footer(class: "page-footer blue darken-3") {
                div(class: "footer-copyright") {
                    div(class: "container", "Generated via Custom Gradle task") {
                        a(class: "grey-text text-lighten-4 right", "")
                    }
                }
            }
            script(type: "text/javascript", src: "https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/js/materialize.min.js") {
                mkp.yield("")
            }
        }
    }
}

task resultGenerator() {
    doFirst {
        buildDirExist()
    }

    doLast {
        def xmlFile = new XmlParser().parse(new File("$buildDir/outputs/test_result.xml"))
        def xmlWriter = new FileWriter(new File("$buildDir/test-report/report.html"))
        def xmlMarkup = new MarkupBuilder(xmlWriter)
        xmlWriter.write("<!DOCTYPE html>\n")
        xmlMarkup.html() {
            head() {
                meta(charset: "utf-8")
                meta(name: "viewport", content: "width=device-width, initial-scale=1, maximum-scale=1")
                title("Test Report")
                link(rel: "stylesheet", href: "./css/main.css") { mkp.yield("") }
                link(rel: "stylesheet", href: "https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/css/materialize.min.css", media: "screen,projection") {
                    mkp.yield("")
                }
                link(rel: "stylesheet", href: "https://fonts.googleapis.com/icon?family=Material+Icons") {
                    mkp.yield("")
                }
            }
            body() {
                header() {
                    div("class": "nav-wrapper") {
                        nav(class: "blue darken-3") {
                            a(class: "brand-logo", href: "#", id: "logo-container") {
                                img(class: "logo-img", src: "") {
                                    mkp.yield("")
                                }
                            }
                            a("href": "index.html") {
                                ul(class: "center flow-text", "TEST RESULTS")
                            }
                        }
                    }
                }
                main() {
                    div("class": "container") {
                        h2("Suite Name : " + xmlFile.'@name')
                        h5("Total Tests Executed : " + xmlFile.'@tests')
                        h5("Total Tests Failed : " + xmlFile.'@failures')
                        h5("Date : " + xmlFile.'@timestamp' + " " + "UTC")
                        div(style: "margin-bottom: 50px;") {
                            table(class: "striped highlight responsive-table") {
                                thead() {
                                    tr() {
                                        th(class: "center", "Test Name")
                                        th(class: "center", "Result")
                                        th(class: "center", "Failure Reason")
                                    }
                                }
                                tbody() {
                                    xmlFile.testcase.each { testcase ->
                                        if (testcase.failure.size() <= 0) {
                                            tr(class: "green lighten-5") {
                                                td(class: "center", testcase['@name'])
                                                td(class: "center", "Passed")
                                                td("")
                                            }
                                        } else {
                                            tr(class: "red lighten-5") {
                                                td(class: "center", testcase['@name'])
                                                td(class: "center", "Failed")
                                                td(class: "center", testcase.failure.toString().replace("[", "").replace("]", "").split("More info")[0])
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            footer(class: "page-footer blue darken-3") {
                div(class: "footer-copyright") {
                    div(class: "container", "Generated via Custom Gradle task") {
                        a(class: "grey-text text-lighten-4 right", "")
                    }
                }
            }
            script(type: "text/javascript", src: "https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/js/materialize.min.js") {
                mkp.yield("")
            }
        }
    }
}

resultGenerator.dependsOn htmlReport
android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    testOptions {
        unitTests.includeAndroidResources = true
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}